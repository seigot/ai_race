<launch>
  <!-- roslaunch arguments -->
  <arg name="show_rviz" default="false"/>
  <arg name="paused" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="gui" default="false"/>
  <arg name="track_name" default="medium_track.world"/>
  <arg name="controller" default="false" />
  <arg name="dynamic_recon" default="false" />
  <arg name="with_auto_recovery" default="false" />

  <!-- We resume the logic in empty_world.launch, changing only the name of 
    the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find sim_world)/worlds/$(arg track_name)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />    
    <arg name="use_sim_time" value="true" />
    <arg name="headless" value="false" />
  </include>

  <!-- urdf xml robot description loaded on the Parameter Server-->
  <param name="robot_description" command="$(find xacro)/xacro.py '$(find sim_environment)/urdf/wheel_robot.urdf.xacro'" />
  <param name="camera_description" command="$(find xacro)/xacro.py '$(find sim_environment)/urdf/surveillance_camera.urdf.xacro'" />
  <param name="godeye_description" command="$(find xacro)/xacro.py '$(find sim_environment)/urdf/godeye.urdf.xacro'" />

  <!-- push robot_description to factory and spawn robot in gazebo -->
  <group unless="$(eval track_name=='hard_track.world')">
    <node name="wheel_robot_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
      args="-urdf -x 1.6 -y 0.0 -z 0.0 -Y 1.57  -param robot_description -model wheel_robot" />
    <node name="camera_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
      args="-urdf -x 1.0 -y 0.0 -z 0.0 -Y 0  -param camera_description -model surveillance_camera" />
    <node name="godeye_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" 
      args="-urdf -x 0.0 -y 0.0 -z 0.0 -param godeye_description -model godeye_camera" />
  </group>

  <group if="$(eval track_name=='hard_track.world')">
    <node name="wheel_robot_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
      args="-urdf -x 1.8 -y 0.6 -z 0.03 -Y 0.0 -param robot_description -model wheel_robot" />
    <node name="camera_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
      args="-urdf -x 2.0 -y 0.12 -z 0.13 -Y 1.57 -param camera_description -model surveillance_camera" />
    <node name="godeye_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" 
      args="-urdf -x 3.3 -y 2.3 -z 0.0 -Y 1.57 -param godeye_description -model godeye_camera" />
  </group>

  <!-- robot visualization in Rviz -->
  <group if="$(arg show_rviz)">
    <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find sim_environment)/launch/wheel_robot.rviz"/> 
  </group> 

  <!-- load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find sim_environment)/config/joint_position_control.yaml" command="load" />
  <!-- load the controllers -->
  <node name="controller_manager" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="rear_left_wheel_velocity_controller rear_right_wheel_velocity_controller
                                        front_left_wheel_velocity_controller front_right_wheel_velocity_controller
                                        front_left_hinge_position_controller front_right_hinge_position_controller
                                        joint_state_controller"/>

  <!-- publish all the frames to TF -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
    <param name="publish_frequency" value="50"/> <!-- Hz -->
  </node>
  <!--<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>-->
  
  <!--<node name="rqt_gui" pkg="rqt_gui" type="rqt_gui"/>-->
  <node name="image_view" pkg="image_view" type="image_view" args="image:=/front_camera/image_raw" />
  <node name="image_view_sur_camera" pkg="image_view" type="image_view" args="image:=/surveillance_camera/image_raw" />
  <node name="image_view_godeye_camera" pkg="image_view" type="image_view" args="image:=/godeye_camera/image_raw" />

  <!-- use dynamic reconfigure course_out_surveillance-->
  <group if="$(eval dynamic_recon==true)">
    <!-- dynamic reconfigure SERVER for max speed coeff node -->
      <node pkg="sim_environment" type="dynamic_recon_server.py" name="dynamic_recon_server_node" output="screen" />
    <!-- dynamic reconfigure CLIENT for max speed coeff node -->
      <node pkg="sim_environment" type="course_out_surveillance.py" name="course_out_surveillance" output="screen" />
  </group>

  <!-- servo node -->
    <node pkg="sim_environment" type="servo_commands.py" name="servo_commands" output="screen" />

  <!-- field information manamegent node -->
  <!-- timing surveillance node-->
    <node pkg="sim_environment" type="judge_communication_d.py" name="judge_communication_d" output="screen" />  
  <!-- timing surveillance node-->
    <node pkg="sim_environment" type="timing_surveillance.py" name="timing_surveillance" output="screen" />
  <!-- courseout recovery node-->
    <node pkg="sim_environment" type="jugemu.py" name="jugemu" output="screen" />  
  <group if="$(eval with_auto_recovery==true)">
    <rosparam file="$(find sim_environment)/config/respown_point.yaml" command="load" />
    <node pkg="sim_environment" type="detect_stack.py" name="detect_stack" output="screen" /> 
    <node pkg="sim_environment" type="jugemu_new.py" name="jugemu_new" output="screen" />
  </group>

  <!-- without gui(with keyboard con) -->
  <group if="$(eval gui==false)">
      <node pkg="sim_environment" type="window_management2.py" name="window_management" output="screen" />
  </group>
  <group if="$(eval controller==true)">
      <node pkg="utility" type="keyboard_con_pygame2.py" name="keyboard_con_pygame2" output="screen" />
  </group>

</launch>
